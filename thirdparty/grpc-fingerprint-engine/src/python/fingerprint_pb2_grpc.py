# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import fingerprint_pb2 as fingerprint__pb2


class FingerPrintStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.EnrollFingerprint = channel.unary_unary(
                '/fingerprint.FingerPrint/EnrollFingerprint',
                request_serializer=fingerprint__pb2.EnrollmentRequest.SerializeToString,
                response_deserializer=fingerprint__pb2.EnrolledFMD.FromString,
                )
        self.VerifyFingerprint = channel.unary_unary(
                '/fingerprint.FingerPrint/VerifyFingerprint',
                request_serializer=fingerprint__pb2.VerificationRequest.SerializeToString,
                response_deserializer=fingerprint__pb2.VerificationResponse.FromString,
                )
        self.CheckDuplicate = channel.unary_unary(
                '/fingerprint.FingerPrint/CheckDuplicate',
                request_serializer=fingerprint__pb2.VerificationRequest.SerializeToString,
                response_deserializer=fingerprint__pb2.CheckDuplicateResponse.FromString,
                )


class FingerPrintServicer(object):
    """Missing associated documentation comment in .proto file."""

    def EnrollFingerprint(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyFingerprint(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckDuplicate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FingerPrintServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'EnrollFingerprint': grpc.unary_unary_rpc_method_handler(
                    servicer.EnrollFingerprint,
                    request_deserializer=fingerprint__pb2.EnrollmentRequest.FromString,
                    response_serializer=fingerprint__pb2.EnrolledFMD.SerializeToString,
            ),
            'VerifyFingerprint': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyFingerprint,
                    request_deserializer=fingerprint__pb2.VerificationRequest.FromString,
                    response_serializer=fingerprint__pb2.VerificationResponse.SerializeToString,
            ),
            'CheckDuplicate': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckDuplicate,
                    request_deserializer=fingerprint__pb2.VerificationRequest.FromString,
                    response_serializer=fingerprint__pb2.CheckDuplicateResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'fingerprint.FingerPrint', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FingerPrint(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def EnrollFingerprint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fingerprint.FingerPrint/EnrollFingerprint',
            fingerprint__pb2.EnrollmentRequest.SerializeToString,
            fingerprint__pb2.EnrolledFMD.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VerifyFingerprint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fingerprint.FingerPrint/VerifyFingerprint',
            fingerprint__pb2.VerificationRequest.SerializeToString,
            fingerprint__pb2.VerificationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckDuplicate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fingerprint.FingerPrint/CheckDuplicate',
            fingerprint__pb2.VerificationRequest.SerializeToString,
            fingerprint__pb2.CheckDuplicateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
