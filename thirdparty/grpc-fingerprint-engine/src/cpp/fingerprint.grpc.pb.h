// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: fingerprint.proto
// Original file comments:
// 
//
// Bismillahirrahmanirraheem
// Author: Dahir Muhammad Dahir
// Date: 22-01-2021 02:47 PM
// About: I will tell you later
//
//
#ifndef GRPC_fingerprint_2eproto__INCLUDED
#define GRPC_fingerprint_2eproto__INCLUDED

#include "fingerprint.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace fingerprint {

class FingerPrint final {
 public:
  static constexpr char const* service_full_name() {
    return "fingerprint.FingerPrint";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status EnrollFingerprint(::grpc::ClientContext* context, const ::fingerprint::EnrollmentRequest& request, ::fingerprint::EnrolledFMD* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fingerprint::EnrolledFMD>> AsyncEnrollFingerprint(::grpc::ClientContext* context, const ::fingerprint::EnrollmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fingerprint::EnrolledFMD>>(AsyncEnrollFingerprintRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fingerprint::EnrolledFMD>> PrepareAsyncEnrollFingerprint(::grpc::ClientContext* context, const ::fingerprint::EnrollmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fingerprint::EnrolledFMD>>(PrepareAsyncEnrollFingerprintRaw(context, request, cq));
    }
    virtual ::grpc::Status VerifyFingerprint(::grpc::ClientContext* context, const ::fingerprint::VerificationRequest& request, ::fingerprint::VerificationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fingerprint::VerificationResponse>> AsyncVerifyFingerprint(::grpc::ClientContext* context, const ::fingerprint::VerificationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fingerprint::VerificationResponse>>(AsyncVerifyFingerprintRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fingerprint::VerificationResponse>> PrepareAsyncVerifyFingerprint(::grpc::ClientContext* context, const ::fingerprint::VerificationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fingerprint::VerificationResponse>>(PrepareAsyncVerifyFingerprintRaw(context, request, cq));
    }
    virtual ::grpc::Status CheckDuplicate(::grpc::ClientContext* context, const ::fingerprint::VerificationRequest& request, ::fingerprint::CheckDuplicateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fingerprint::CheckDuplicateResponse>> AsyncCheckDuplicate(::grpc::ClientContext* context, const ::fingerprint::VerificationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fingerprint::CheckDuplicateResponse>>(AsyncCheckDuplicateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fingerprint::CheckDuplicateResponse>> PrepareAsyncCheckDuplicate(::grpc::ClientContext* context, const ::fingerprint::VerificationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fingerprint::CheckDuplicateResponse>>(PrepareAsyncCheckDuplicateRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void EnrollFingerprint(::grpc::ClientContext* context, const ::fingerprint::EnrollmentRequest* request, ::fingerprint::EnrolledFMD* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void EnrollFingerprint(::grpc::ClientContext* context, const ::fingerprint::EnrollmentRequest* request, ::fingerprint::EnrolledFMD* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void EnrollFingerprint(::grpc::ClientContext* context, const ::fingerprint::EnrollmentRequest* request, ::fingerprint::EnrolledFMD* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void VerifyFingerprint(::grpc::ClientContext* context, const ::fingerprint::VerificationRequest* request, ::fingerprint::VerificationResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void VerifyFingerprint(::grpc::ClientContext* context, const ::fingerprint::VerificationRequest* request, ::fingerprint::VerificationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void VerifyFingerprint(::grpc::ClientContext* context, const ::fingerprint::VerificationRequest* request, ::fingerprint::VerificationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void CheckDuplicate(::grpc::ClientContext* context, const ::fingerprint::VerificationRequest* request, ::fingerprint::CheckDuplicateResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CheckDuplicate(::grpc::ClientContext* context, const ::fingerprint::VerificationRequest* request, ::fingerprint::CheckDuplicateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CheckDuplicate(::grpc::ClientContext* context, const ::fingerprint::VerificationRequest* request, ::fingerprint::CheckDuplicateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fingerprint::EnrolledFMD>* AsyncEnrollFingerprintRaw(::grpc::ClientContext* context, const ::fingerprint::EnrollmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fingerprint::EnrolledFMD>* PrepareAsyncEnrollFingerprintRaw(::grpc::ClientContext* context, const ::fingerprint::EnrollmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fingerprint::VerificationResponse>* AsyncVerifyFingerprintRaw(::grpc::ClientContext* context, const ::fingerprint::VerificationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fingerprint::VerificationResponse>* PrepareAsyncVerifyFingerprintRaw(::grpc::ClientContext* context, const ::fingerprint::VerificationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fingerprint::CheckDuplicateResponse>* AsyncCheckDuplicateRaw(::grpc::ClientContext* context, const ::fingerprint::VerificationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fingerprint::CheckDuplicateResponse>* PrepareAsyncCheckDuplicateRaw(::grpc::ClientContext* context, const ::fingerprint::VerificationRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status EnrollFingerprint(::grpc::ClientContext* context, const ::fingerprint::EnrollmentRequest& request, ::fingerprint::EnrolledFMD* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fingerprint::EnrolledFMD>> AsyncEnrollFingerprint(::grpc::ClientContext* context, const ::fingerprint::EnrollmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fingerprint::EnrolledFMD>>(AsyncEnrollFingerprintRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fingerprint::EnrolledFMD>> PrepareAsyncEnrollFingerprint(::grpc::ClientContext* context, const ::fingerprint::EnrollmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fingerprint::EnrolledFMD>>(PrepareAsyncEnrollFingerprintRaw(context, request, cq));
    }
    ::grpc::Status VerifyFingerprint(::grpc::ClientContext* context, const ::fingerprint::VerificationRequest& request, ::fingerprint::VerificationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fingerprint::VerificationResponse>> AsyncVerifyFingerprint(::grpc::ClientContext* context, const ::fingerprint::VerificationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fingerprint::VerificationResponse>>(AsyncVerifyFingerprintRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fingerprint::VerificationResponse>> PrepareAsyncVerifyFingerprint(::grpc::ClientContext* context, const ::fingerprint::VerificationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fingerprint::VerificationResponse>>(PrepareAsyncVerifyFingerprintRaw(context, request, cq));
    }
    ::grpc::Status CheckDuplicate(::grpc::ClientContext* context, const ::fingerprint::VerificationRequest& request, ::fingerprint::CheckDuplicateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fingerprint::CheckDuplicateResponse>> AsyncCheckDuplicate(::grpc::ClientContext* context, const ::fingerprint::VerificationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fingerprint::CheckDuplicateResponse>>(AsyncCheckDuplicateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fingerprint::CheckDuplicateResponse>> PrepareAsyncCheckDuplicate(::grpc::ClientContext* context, const ::fingerprint::VerificationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fingerprint::CheckDuplicateResponse>>(PrepareAsyncCheckDuplicateRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void EnrollFingerprint(::grpc::ClientContext* context, const ::fingerprint::EnrollmentRequest* request, ::fingerprint::EnrolledFMD* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void EnrollFingerprint(::grpc::ClientContext* context, const ::fingerprint::EnrollmentRequest* request, ::fingerprint::EnrolledFMD* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void EnrollFingerprint(::grpc::ClientContext* context, const ::fingerprint::EnrollmentRequest* request, ::fingerprint::EnrolledFMD* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void VerifyFingerprint(::grpc::ClientContext* context, const ::fingerprint::VerificationRequest* request, ::fingerprint::VerificationResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void VerifyFingerprint(::grpc::ClientContext* context, const ::fingerprint::VerificationRequest* request, ::fingerprint::VerificationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void VerifyFingerprint(::grpc::ClientContext* context, const ::fingerprint::VerificationRequest* request, ::fingerprint::VerificationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CheckDuplicate(::grpc::ClientContext* context, const ::fingerprint::VerificationRequest* request, ::fingerprint::CheckDuplicateResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CheckDuplicate(::grpc::ClientContext* context, const ::fingerprint::VerificationRequest* request, ::fingerprint::CheckDuplicateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CheckDuplicate(::grpc::ClientContext* context, const ::fingerprint::VerificationRequest* request, ::fingerprint::CheckDuplicateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::fingerprint::EnrolledFMD>* AsyncEnrollFingerprintRaw(::grpc::ClientContext* context, const ::fingerprint::EnrollmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fingerprint::EnrolledFMD>* PrepareAsyncEnrollFingerprintRaw(::grpc::ClientContext* context, const ::fingerprint::EnrollmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fingerprint::VerificationResponse>* AsyncVerifyFingerprintRaw(::grpc::ClientContext* context, const ::fingerprint::VerificationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fingerprint::VerificationResponse>* PrepareAsyncVerifyFingerprintRaw(::grpc::ClientContext* context, const ::fingerprint::VerificationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fingerprint::CheckDuplicateResponse>* AsyncCheckDuplicateRaw(::grpc::ClientContext* context, const ::fingerprint::VerificationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fingerprint::CheckDuplicateResponse>* PrepareAsyncCheckDuplicateRaw(::grpc::ClientContext* context, const ::fingerprint::VerificationRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_EnrollFingerprint_;
    const ::grpc::internal::RpcMethod rpcmethod_VerifyFingerprint_;
    const ::grpc::internal::RpcMethod rpcmethod_CheckDuplicate_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status EnrollFingerprint(::grpc::ServerContext* context, const ::fingerprint::EnrollmentRequest* request, ::fingerprint::EnrolledFMD* response);
    virtual ::grpc::Status VerifyFingerprint(::grpc::ServerContext* context, const ::fingerprint::VerificationRequest* request, ::fingerprint::VerificationResponse* response);
    virtual ::grpc::Status CheckDuplicate(::grpc::ServerContext* context, const ::fingerprint::VerificationRequest* request, ::fingerprint::CheckDuplicateResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_EnrollFingerprint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EnrollFingerprint() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_EnrollFingerprint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EnrollFingerprint(::grpc::ServerContext* /*context*/, const ::fingerprint::EnrollmentRequest* /*request*/, ::fingerprint::EnrolledFMD* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEnrollFingerprint(::grpc::ServerContext* context, ::fingerprint::EnrollmentRequest* request, ::grpc::ServerAsyncResponseWriter< ::fingerprint::EnrolledFMD>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VerifyFingerprint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_VerifyFingerprint() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_VerifyFingerprint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyFingerprint(::grpc::ServerContext* /*context*/, const ::fingerprint::VerificationRequest* /*request*/, ::fingerprint::VerificationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerifyFingerprint(::grpc::ServerContext* context, ::fingerprint::VerificationRequest* request, ::grpc::ServerAsyncResponseWriter< ::fingerprint::VerificationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckDuplicate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CheckDuplicate() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CheckDuplicate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckDuplicate(::grpc::ServerContext* /*context*/, const ::fingerprint::VerificationRequest* /*request*/, ::fingerprint::CheckDuplicateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckDuplicate(::grpc::ServerContext* context, ::fingerprint::VerificationRequest* request, ::grpc::ServerAsyncResponseWriter< ::fingerprint::CheckDuplicateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_EnrollFingerprint<WithAsyncMethod_VerifyFingerprint<WithAsyncMethod_CheckDuplicate<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_EnrollFingerprint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_EnrollFingerprint() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::fingerprint::EnrollmentRequest, ::fingerprint::EnrolledFMD>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::fingerprint::EnrollmentRequest* request, ::fingerprint::EnrolledFMD* response) { return this->EnrollFingerprint(context, request, response); }));}
    void SetMessageAllocatorFor_EnrollFingerprint(
        ::grpc::experimental::MessageAllocator< ::fingerprint::EnrollmentRequest, ::fingerprint::EnrolledFMD>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::fingerprint::EnrollmentRequest, ::fingerprint::EnrolledFMD>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_EnrollFingerprint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EnrollFingerprint(::grpc::ServerContext* /*context*/, const ::fingerprint::EnrollmentRequest* /*request*/, ::fingerprint::EnrolledFMD* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* EnrollFingerprint(
      ::grpc::CallbackServerContext* /*context*/, const ::fingerprint::EnrollmentRequest* /*request*/, ::fingerprint::EnrolledFMD* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* EnrollFingerprint(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::fingerprint::EnrollmentRequest* /*request*/, ::fingerprint::EnrolledFMD* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_VerifyFingerprint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_VerifyFingerprint() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::fingerprint::VerificationRequest, ::fingerprint::VerificationResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::fingerprint::VerificationRequest* request, ::fingerprint::VerificationResponse* response) { return this->VerifyFingerprint(context, request, response); }));}
    void SetMessageAllocatorFor_VerifyFingerprint(
        ::grpc::experimental::MessageAllocator< ::fingerprint::VerificationRequest, ::fingerprint::VerificationResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::fingerprint::VerificationRequest, ::fingerprint::VerificationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_VerifyFingerprint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyFingerprint(::grpc::ServerContext* /*context*/, const ::fingerprint::VerificationRequest* /*request*/, ::fingerprint::VerificationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* VerifyFingerprint(
      ::grpc::CallbackServerContext* /*context*/, const ::fingerprint::VerificationRequest* /*request*/, ::fingerprint::VerificationResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* VerifyFingerprint(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::fingerprint::VerificationRequest* /*request*/, ::fingerprint::VerificationResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CheckDuplicate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CheckDuplicate() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::fingerprint::VerificationRequest, ::fingerprint::CheckDuplicateResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::fingerprint::VerificationRequest* request, ::fingerprint::CheckDuplicateResponse* response) { return this->CheckDuplicate(context, request, response); }));}
    void SetMessageAllocatorFor_CheckDuplicate(
        ::grpc::experimental::MessageAllocator< ::fingerprint::VerificationRequest, ::fingerprint::CheckDuplicateResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::fingerprint::VerificationRequest, ::fingerprint::CheckDuplicateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CheckDuplicate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckDuplicate(::grpc::ServerContext* /*context*/, const ::fingerprint::VerificationRequest* /*request*/, ::fingerprint::CheckDuplicateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CheckDuplicate(
      ::grpc::CallbackServerContext* /*context*/, const ::fingerprint::VerificationRequest* /*request*/, ::fingerprint::CheckDuplicateResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CheckDuplicate(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::fingerprint::VerificationRequest* /*request*/, ::fingerprint::CheckDuplicateResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_EnrollFingerprint<ExperimentalWithCallbackMethod_VerifyFingerprint<ExperimentalWithCallbackMethod_CheckDuplicate<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_EnrollFingerprint<ExperimentalWithCallbackMethod_VerifyFingerprint<ExperimentalWithCallbackMethod_CheckDuplicate<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_EnrollFingerprint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EnrollFingerprint() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_EnrollFingerprint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EnrollFingerprint(::grpc::ServerContext* /*context*/, const ::fingerprint::EnrollmentRequest* /*request*/, ::fingerprint::EnrolledFMD* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VerifyFingerprint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_VerifyFingerprint() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_VerifyFingerprint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyFingerprint(::grpc::ServerContext* /*context*/, const ::fingerprint::VerificationRequest* /*request*/, ::fingerprint::VerificationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CheckDuplicate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CheckDuplicate() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CheckDuplicate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckDuplicate(::grpc::ServerContext* /*context*/, const ::fingerprint::VerificationRequest* /*request*/, ::fingerprint::CheckDuplicateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_EnrollFingerprint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EnrollFingerprint() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_EnrollFingerprint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EnrollFingerprint(::grpc::ServerContext* /*context*/, const ::fingerprint::EnrollmentRequest* /*request*/, ::fingerprint::EnrolledFMD* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEnrollFingerprint(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_VerifyFingerprint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_VerifyFingerprint() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_VerifyFingerprint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyFingerprint(::grpc::ServerContext* /*context*/, const ::fingerprint::VerificationRequest* /*request*/, ::fingerprint::VerificationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerifyFingerprint(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckDuplicate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CheckDuplicate() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CheckDuplicate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckDuplicate(::grpc::ServerContext* /*context*/, const ::fingerprint::VerificationRequest* /*request*/, ::fingerprint::CheckDuplicateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckDuplicate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_EnrollFingerprint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_EnrollFingerprint() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->EnrollFingerprint(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_EnrollFingerprint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EnrollFingerprint(::grpc::ServerContext* /*context*/, const ::fingerprint::EnrollmentRequest* /*request*/, ::fingerprint::EnrolledFMD* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* EnrollFingerprint(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* EnrollFingerprint(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_VerifyFingerprint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_VerifyFingerprint() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->VerifyFingerprint(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_VerifyFingerprint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyFingerprint(::grpc::ServerContext* /*context*/, const ::fingerprint::VerificationRequest* /*request*/, ::fingerprint::VerificationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* VerifyFingerprint(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* VerifyFingerprint(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CheckDuplicate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CheckDuplicate() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CheckDuplicate(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CheckDuplicate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckDuplicate(::grpc::ServerContext* /*context*/, const ::fingerprint::VerificationRequest* /*request*/, ::fingerprint::CheckDuplicateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CheckDuplicate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CheckDuplicate(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EnrollFingerprint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_EnrollFingerprint() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::fingerprint::EnrollmentRequest, ::fingerprint::EnrolledFMD>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::fingerprint::EnrollmentRequest, ::fingerprint::EnrolledFMD>* streamer) {
                       return this->StreamedEnrollFingerprint(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_EnrollFingerprint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EnrollFingerprint(::grpc::ServerContext* /*context*/, const ::fingerprint::EnrollmentRequest* /*request*/, ::fingerprint::EnrolledFMD* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEnrollFingerprint(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fingerprint::EnrollmentRequest,::fingerprint::EnrolledFMD>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VerifyFingerprint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_VerifyFingerprint() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::fingerprint::VerificationRequest, ::fingerprint::VerificationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::fingerprint::VerificationRequest, ::fingerprint::VerificationResponse>* streamer) {
                       return this->StreamedVerifyFingerprint(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_VerifyFingerprint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VerifyFingerprint(::grpc::ServerContext* /*context*/, const ::fingerprint::VerificationRequest* /*request*/, ::fingerprint::VerificationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVerifyFingerprint(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fingerprint::VerificationRequest,::fingerprint::VerificationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckDuplicate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CheckDuplicate() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::fingerprint::VerificationRequest, ::fingerprint::CheckDuplicateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::fingerprint::VerificationRequest, ::fingerprint::CheckDuplicateResponse>* streamer) {
                       return this->StreamedCheckDuplicate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CheckDuplicate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckDuplicate(::grpc::ServerContext* /*context*/, const ::fingerprint::VerificationRequest* /*request*/, ::fingerprint::CheckDuplicateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckDuplicate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fingerprint::VerificationRequest,::fingerprint::CheckDuplicateResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_EnrollFingerprint<WithStreamedUnaryMethod_VerifyFingerprint<WithStreamedUnaryMethod_CheckDuplicate<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_EnrollFingerprint<WithStreamedUnaryMethod_VerifyFingerprint<WithStreamedUnaryMethod_CheckDuplicate<Service > > > StreamedService;
};

}  // namespace fingerprint


#endif  // GRPC_fingerprint_2eproto__INCLUDED
