// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fingerprint.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_fingerprint_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_fingerprint_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_fingerprint_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_fingerprint_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fingerprint_2eproto;
namespace fingerprint {
class CheckDuplicateResponse;
class CheckDuplicateResponseDefaultTypeInternal;
extern CheckDuplicateResponseDefaultTypeInternal _CheckDuplicateResponse_default_instance_;
class EnrolledFMD;
class EnrolledFMDDefaultTypeInternal;
extern EnrolledFMDDefaultTypeInternal _EnrolledFMD_default_instance_;
class EnrollmentRequest;
class EnrollmentRequestDefaultTypeInternal;
extern EnrollmentRequestDefaultTypeInternal _EnrollmentRequest_default_instance_;
class PreEnrolledFMD;
class PreEnrolledFMDDefaultTypeInternal;
extern PreEnrolledFMDDefaultTypeInternal _PreEnrolledFMD_default_instance_;
class VerificationRequest;
class VerificationRequestDefaultTypeInternal;
extern VerificationRequestDefaultTypeInternal _VerificationRequest_default_instance_;
class VerificationResponse;
class VerificationResponseDefaultTypeInternal;
extern VerificationResponseDefaultTypeInternal _VerificationResponse_default_instance_;
}  // namespace fingerprint
PROTOBUF_NAMESPACE_OPEN
template<> ::fingerprint::CheckDuplicateResponse* Arena::CreateMaybeMessage<::fingerprint::CheckDuplicateResponse>(Arena*);
template<> ::fingerprint::EnrolledFMD* Arena::CreateMaybeMessage<::fingerprint::EnrolledFMD>(Arena*);
template<> ::fingerprint::EnrollmentRequest* Arena::CreateMaybeMessage<::fingerprint::EnrollmentRequest>(Arena*);
template<> ::fingerprint::PreEnrolledFMD* Arena::CreateMaybeMessage<::fingerprint::PreEnrolledFMD>(Arena*);
template<> ::fingerprint::VerificationRequest* Arena::CreateMaybeMessage<::fingerprint::VerificationRequest>(Arena*);
template<> ::fingerprint::VerificationResponse* Arena::CreateMaybeMessage<::fingerprint::VerificationResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace fingerprint {

// ===================================================================

class PreEnrolledFMD PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fingerprint.PreEnrolledFMD) */ {
 public:
  inline PreEnrolledFMD() : PreEnrolledFMD(nullptr) {}
  virtual ~PreEnrolledFMD();

  PreEnrolledFMD(const PreEnrolledFMD& from);
  PreEnrolledFMD(PreEnrolledFMD&& from) noexcept
    : PreEnrolledFMD() {
    *this = ::std::move(from);
  }

  inline PreEnrolledFMD& operator=(const PreEnrolledFMD& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreEnrolledFMD& operator=(PreEnrolledFMD&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PreEnrolledFMD& default_instance();

  static inline const PreEnrolledFMD* internal_default_instance() {
    return reinterpret_cast<const PreEnrolledFMD*>(
               &_PreEnrolledFMD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PreEnrolledFMD& a, PreEnrolledFMD& b) {
    a.Swap(&b);
  }
  inline void Swap(PreEnrolledFMD* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PreEnrolledFMD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PreEnrolledFMD* New() const final {
    return CreateMaybeMessage<PreEnrolledFMD>(nullptr);
  }

  PreEnrolledFMD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PreEnrolledFMD>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PreEnrolledFMD& from);
  void MergeFrom(const PreEnrolledFMD& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PreEnrolledFMD* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fingerprint.PreEnrolledFMD";
  }
  protected:
  explicit PreEnrolledFMD(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fingerprint_2eproto);
    return ::descriptor_table_fingerprint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBase64PreEnrolledFMDFieldNumber = 1,
  };
  // string base64PreEnrolledFMD = 1;
  void clear_base64preenrolledfmd();
  const std::string& base64preenrolledfmd() const;
  void set_base64preenrolledfmd(const std::string& value);
  void set_base64preenrolledfmd(std::string&& value);
  void set_base64preenrolledfmd(const char* value);
  void set_base64preenrolledfmd(const char* value, size_t size);
  std::string* mutable_base64preenrolledfmd();
  std::string* release_base64preenrolledfmd();
  void set_allocated_base64preenrolledfmd(std::string* base64preenrolledfmd);
  private:
  const std::string& _internal_base64preenrolledfmd() const;
  void _internal_set_base64preenrolledfmd(const std::string& value);
  std::string* _internal_mutable_base64preenrolledfmd();
  public:

  // @@protoc_insertion_point(class_scope:fingerprint.PreEnrolledFMD)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base64preenrolledfmd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fingerprint_2eproto;
};
// -------------------------------------------------------------------

class EnrolledFMD PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fingerprint.EnrolledFMD) */ {
 public:
  inline EnrolledFMD() : EnrolledFMD(nullptr) {}
  virtual ~EnrolledFMD();

  EnrolledFMD(const EnrolledFMD& from);
  EnrolledFMD(EnrolledFMD&& from) noexcept
    : EnrolledFMD() {
    *this = ::std::move(from);
  }

  inline EnrolledFMD& operator=(const EnrolledFMD& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnrolledFMD& operator=(EnrolledFMD&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnrolledFMD& default_instance();

  static inline const EnrolledFMD* internal_default_instance() {
    return reinterpret_cast<const EnrolledFMD*>(
               &_EnrolledFMD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EnrolledFMD& a, EnrolledFMD& b) {
    a.Swap(&b);
  }
  inline void Swap(EnrolledFMD* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnrolledFMD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnrolledFMD* New() const final {
    return CreateMaybeMessage<EnrolledFMD>(nullptr);
  }

  EnrolledFMD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnrolledFMD>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnrolledFMD& from);
  void MergeFrom(const EnrolledFMD& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnrolledFMD* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fingerprint.EnrolledFMD";
  }
  protected:
  explicit EnrolledFMD(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fingerprint_2eproto);
    return ::descriptor_table_fingerprint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBase64EnrolledFMDFieldNumber = 1,
  };
  // string base64EnrolledFMD = 1;
  void clear_base64enrolledfmd();
  const std::string& base64enrolledfmd() const;
  void set_base64enrolledfmd(const std::string& value);
  void set_base64enrolledfmd(std::string&& value);
  void set_base64enrolledfmd(const char* value);
  void set_base64enrolledfmd(const char* value, size_t size);
  std::string* mutable_base64enrolledfmd();
  std::string* release_base64enrolledfmd();
  void set_allocated_base64enrolledfmd(std::string* base64enrolledfmd);
  private:
  const std::string& _internal_base64enrolledfmd() const;
  void _internal_set_base64enrolledfmd(const std::string& value);
  std::string* _internal_mutable_base64enrolledfmd();
  public:

  // @@protoc_insertion_point(class_scope:fingerprint.EnrolledFMD)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base64enrolledfmd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fingerprint_2eproto;
};
// -------------------------------------------------------------------

class EnrollmentRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fingerprint.EnrollmentRequest) */ {
 public:
  inline EnrollmentRequest() : EnrollmentRequest(nullptr) {}
  virtual ~EnrollmentRequest();

  EnrollmentRequest(const EnrollmentRequest& from);
  EnrollmentRequest(EnrollmentRequest&& from) noexcept
    : EnrollmentRequest() {
    *this = ::std::move(from);
  }

  inline EnrollmentRequest& operator=(const EnrollmentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnrollmentRequest& operator=(EnrollmentRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnrollmentRequest& default_instance();

  static inline const EnrollmentRequest* internal_default_instance() {
    return reinterpret_cast<const EnrollmentRequest*>(
               &_EnrollmentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EnrollmentRequest& a, EnrollmentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EnrollmentRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnrollmentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnrollmentRequest* New() const final {
    return CreateMaybeMessage<EnrollmentRequest>(nullptr);
  }

  EnrollmentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnrollmentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnrollmentRequest& from);
  void MergeFrom(const EnrollmentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnrollmentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fingerprint.EnrollmentRequest";
  }
  protected:
  explicit EnrollmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fingerprint_2eproto);
    return ::descriptor_table_fingerprint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFmdCandidatesFieldNumber = 1,
  };
  // repeated .fingerprint.PreEnrolledFMD fmdCandidates = 1;
  int fmdcandidates_size() const;
  private:
  int _internal_fmdcandidates_size() const;
  public:
  void clear_fmdcandidates();
  ::fingerprint::PreEnrolledFMD* mutable_fmdcandidates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fingerprint::PreEnrolledFMD >*
      mutable_fmdcandidates();
  private:
  const ::fingerprint::PreEnrolledFMD& _internal_fmdcandidates(int index) const;
  ::fingerprint::PreEnrolledFMD* _internal_add_fmdcandidates();
  public:
  const ::fingerprint::PreEnrolledFMD& fmdcandidates(int index) const;
  ::fingerprint::PreEnrolledFMD* add_fmdcandidates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fingerprint::PreEnrolledFMD >&
      fmdcandidates() const;

  // @@protoc_insertion_point(class_scope:fingerprint.EnrollmentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fingerprint::PreEnrolledFMD > fmdcandidates_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fingerprint_2eproto;
};
// -------------------------------------------------------------------

class VerificationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fingerprint.VerificationRequest) */ {
 public:
  inline VerificationRequest() : VerificationRequest(nullptr) {}
  virtual ~VerificationRequest();

  VerificationRequest(const VerificationRequest& from);
  VerificationRequest(VerificationRequest&& from) noexcept
    : VerificationRequest() {
    *this = ::std::move(from);
  }

  inline VerificationRequest& operator=(const VerificationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerificationRequest& operator=(VerificationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VerificationRequest& default_instance();

  static inline const VerificationRequest* internal_default_instance() {
    return reinterpret_cast<const VerificationRequest*>(
               &_VerificationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(VerificationRequest& a, VerificationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VerificationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VerificationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VerificationRequest* New() const final {
    return CreateMaybeMessage<VerificationRequest>(nullptr);
  }

  VerificationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VerificationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VerificationRequest& from);
  void MergeFrom(const VerificationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerificationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fingerprint.VerificationRequest";
  }
  protected:
  explicit VerificationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fingerprint_2eproto);
    return ::descriptor_table_fingerprint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFmdCandidatesFieldNumber = 2,
    kTargetFMDFieldNumber = 1,
  };
  // repeated .fingerprint.EnrolledFMD fmdCandidates = 2;
  int fmdcandidates_size() const;
  private:
  int _internal_fmdcandidates_size() const;
  public:
  void clear_fmdcandidates();
  ::fingerprint::EnrolledFMD* mutable_fmdcandidates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fingerprint::EnrolledFMD >*
      mutable_fmdcandidates();
  private:
  const ::fingerprint::EnrolledFMD& _internal_fmdcandidates(int index) const;
  ::fingerprint::EnrolledFMD* _internal_add_fmdcandidates();
  public:
  const ::fingerprint::EnrolledFMD& fmdcandidates(int index) const;
  ::fingerprint::EnrolledFMD* add_fmdcandidates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fingerprint::EnrolledFMD >&
      fmdcandidates() const;

  // .fingerprint.PreEnrolledFMD targetFMD = 1;
  bool has_targetfmd() const;
  private:
  bool _internal_has_targetfmd() const;
  public:
  void clear_targetfmd();
  const ::fingerprint::PreEnrolledFMD& targetfmd() const;
  ::fingerprint::PreEnrolledFMD* release_targetfmd();
  ::fingerprint::PreEnrolledFMD* mutable_targetfmd();
  void set_allocated_targetfmd(::fingerprint::PreEnrolledFMD* targetfmd);
  private:
  const ::fingerprint::PreEnrolledFMD& _internal_targetfmd() const;
  ::fingerprint::PreEnrolledFMD* _internal_mutable_targetfmd();
  public:
  void unsafe_arena_set_allocated_targetfmd(
      ::fingerprint::PreEnrolledFMD* targetfmd);
  ::fingerprint::PreEnrolledFMD* unsafe_arena_release_targetfmd();

  // @@protoc_insertion_point(class_scope:fingerprint.VerificationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fingerprint::EnrolledFMD > fmdcandidates_;
  ::fingerprint::PreEnrolledFMD* targetfmd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fingerprint_2eproto;
};
// -------------------------------------------------------------------

class VerificationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fingerprint.VerificationResponse) */ {
 public:
  inline VerificationResponse() : VerificationResponse(nullptr) {}
  virtual ~VerificationResponse();

  VerificationResponse(const VerificationResponse& from);
  VerificationResponse(VerificationResponse&& from) noexcept
    : VerificationResponse() {
    *this = ::std::move(from);
  }

  inline VerificationResponse& operator=(const VerificationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerificationResponse& operator=(VerificationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VerificationResponse& default_instance();

  static inline const VerificationResponse* internal_default_instance() {
    return reinterpret_cast<const VerificationResponse*>(
               &_VerificationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(VerificationResponse& a, VerificationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VerificationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VerificationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VerificationResponse* New() const final {
    return CreateMaybeMessage<VerificationResponse>(nullptr);
  }

  VerificationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VerificationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VerificationResponse& from);
  void MergeFrom(const VerificationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerificationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fingerprint.VerificationResponse";
  }
  protected:
  explicit VerificationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fingerprint_2eproto);
    return ::descriptor_table_fingerprint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchFieldNumber = 1,
  };
  // bool match = 1;
  void clear_match();
  bool match() const;
  void set_match(bool value);
  private:
  bool _internal_match() const;
  void _internal_set_match(bool value);
  public:

  // @@protoc_insertion_point(class_scope:fingerprint.VerificationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool match_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fingerprint_2eproto;
};
// -------------------------------------------------------------------

class CheckDuplicateResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fingerprint.CheckDuplicateResponse) */ {
 public:
  inline CheckDuplicateResponse() : CheckDuplicateResponse(nullptr) {}
  virtual ~CheckDuplicateResponse();

  CheckDuplicateResponse(const CheckDuplicateResponse& from);
  CheckDuplicateResponse(CheckDuplicateResponse&& from) noexcept
    : CheckDuplicateResponse() {
    *this = ::std::move(from);
  }

  inline CheckDuplicateResponse& operator=(const CheckDuplicateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckDuplicateResponse& operator=(CheckDuplicateResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckDuplicateResponse& default_instance();

  static inline const CheckDuplicateResponse* internal_default_instance() {
    return reinterpret_cast<const CheckDuplicateResponse*>(
               &_CheckDuplicateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CheckDuplicateResponse& a, CheckDuplicateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckDuplicateResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckDuplicateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckDuplicateResponse* New() const final {
    return CreateMaybeMessage<CheckDuplicateResponse>(nullptr);
  }

  CheckDuplicateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckDuplicateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckDuplicateResponse& from);
  void MergeFrom(const CheckDuplicateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckDuplicateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fingerprint.CheckDuplicateResponse";
  }
  protected:
  explicit CheckDuplicateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fingerprint_2eproto);
    return ::descriptor_table_fingerprint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsDuplicateFieldNumber = 1,
  };
  // bool isDuplicate = 1;
  void clear_isduplicate();
  bool isduplicate() const;
  void set_isduplicate(bool value);
  private:
  bool _internal_isduplicate() const;
  void _internal_set_isduplicate(bool value);
  public:

  // @@protoc_insertion_point(class_scope:fingerprint.CheckDuplicateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool isduplicate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fingerprint_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PreEnrolledFMD

// string base64PreEnrolledFMD = 1;
inline void PreEnrolledFMD::clear_base64preenrolledfmd() {
  base64preenrolledfmd_.ClearToEmpty();
}
inline const std::string& PreEnrolledFMD::base64preenrolledfmd() const {
  // @@protoc_insertion_point(field_get:fingerprint.PreEnrolledFMD.base64PreEnrolledFMD)
  return _internal_base64preenrolledfmd();
}
inline void PreEnrolledFMD::set_base64preenrolledfmd(const std::string& value) {
  _internal_set_base64preenrolledfmd(value);
  // @@protoc_insertion_point(field_set:fingerprint.PreEnrolledFMD.base64PreEnrolledFMD)
}
inline std::string* PreEnrolledFMD::mutable_base64preenrolledfmd() {
  // @@protoc_insertion_point(field_mutable:fingerprint.PreEnrolledFMD.base64PreEnrolledFMD)
  return _internal_mutable_base64preenrolledfmd();
}
inline const std::string& PreEnrolledFMD::_internal_base64preenrolledfmd() const {
  return base64preenrolledfmd_.Get();
}
inline void PreEnrolledFMD::_internal_set_base64preenrolledfmd(const std::string& value) {
  
  base64preenrolledfmd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PreEnrolledFMD::set_base64preenrolledfmd(std::string&& value) {
  
  base64preenrolledfmd_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fingerprint.PreEnrolledFMD.base64PreEnrolledFMD)
}
inline void PreEnrolledFMD::set_base64preenrolledfmd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  base64preenrolledfmd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:fingerprint.PreEnrolledFMD.base64PreEnrolledFMD)
}
inline void PreEnrolledFMD::set_base64preenrolledfmd(const char* value,
    size_t size) {
  
  base64preenrolledfmd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fingerprint.PreEnrolledFMD.base64PreEnrolledFMD)
}
inline std::string* PreEnrolledFMD::_internal_mutable_base64preenrolledfmd() {
  
  return base64preenrolledfmd_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PreEnrolledFMD::release_base64preenrolledfmd() {
  // @@protoc_insertion_point(field_release:fingerprint.PreEnrolledFMD.base64PreEnrolledFMD)
  return base64preenrolledfmd_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PreEnrolledFMD::set_allocated_base64preenrolledfmd(std::string* base64preenrolledfmd) {
  if (base64preenrolledfmd != nullptr) {
    
  } else {
    
  }
  base64preenrolledfmd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), base64preenrolledfmd,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fingerprint.PreEnrolledFMD.base64PreEnrolledFMD)
}

// -------------------------------------------------------------------

// EnrolledFMD

// string base64EnrolledFMD = 1;
inline void EnrolledFMD::clear_base64enrolledfmd() {
  base64enrolledfmd_.ClearToEmpty();
}
inline const std::string& EnrolledFMD::base64enrolledfmd() const {
  // @@protoc_insertion_point(field_get:fingerprint.EnrolledFMD.base64EnrolledFMD)
  return _internal_base64enrolledfmd();
}
inline void EnrolledFMD::set_base64enrolledfmd(const std::string& value) {
  _internal_set_base64enrolledfmd(value);
  // @@protoc_insertion_point(field_set:fingerprint.EnrolledFMD.base64EnrolledFMD)
}
inline std::string* EnrolledFMD::mutable_base64enrolledfmd() {
  // @@protoc_insertion_point(field_mutable:fingerprint.EnrolledFMD.base64EnrolledFMD)
  return _internal_mutable_base64enrolledfmd();
}
inline const std::string& EnrolledFMD::_internal_base64enrolledfmd() const {
  return base64enrolledfmd_.Get();
}
inline void EnrolledFMD::_internal_set_base64enrolledfmd(const std::string& value) {
  
  base64enrolledfmd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EnrolledFMD::set_base64enrolledfmd(std::string&& value) {
  
  base64enrolledfmd_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fingerprint.EnrolledFMD.base64EnrolledFMD)
}
inline void EnrolledFMD::set_base64enrolledfmd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  base64enrolledfmd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:fingerprint.EnrolledFMD.base64EnrolledFMD)
}
inline void EnrolledFMD::set_base64enrolledfmd(const char* value,
    size_t size) {
  
  base64enrolledfmd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fingerprint.EnrolledFMD.base64EnrolledFMD)
}
inline std::string* EnrolledFMD::_internal_mutable_base64enrolledfmd() {
  
  return base64enrolledfmd_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EnrolledFMD::release_base64enrolledfmd() {
  // @@protoc_insertion_point(field_release:fingerprint.EnrolledFMD.base64EnrolledFMD)
  return base64enrolledfmd_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EnrolledFMD::set_allocated_base64enrolledfmd(std::string* base64enrolledfmd) {
  if (base64enrolledfmd != nullptr) {
    
  } else {
    
  }
  base64enrolledfmd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), base64enrolledfmd,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fingerprint.EnrolledFMD.base64EnrolledFMD)
}

// -------------------------------------------------------------------

// EnrollmentRequest

// repeated .fingerprint.PreEnrolledFMD fmdCandidates = 1;
inline int EnrollmentRequest::_internal_fmdcandidates_size() const {
  return fmdcandidates_.size();
}
inline int EnrollmentRequest::fmdcandidates_size() const {
  return _internal_fmdcandidates_size();
}
inline void EnrollmentRequest::clear_fmdcandidates() {
  fmdcandidates_.Clear();
}
inline ::fingerprint::PreEnrolledFMD* EnrollmentRequest::mutable_fmdcandidates(int index) {
  // @@protoc_insertion_point(field_mutable:fingerprint.EnrollmentRequest.fmdCandidates)
  return fmdcandidates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fingerprint::PreEnrolledFMD >*
EnrollmentRequest::mutable_fmdcandidates() {
  // @@protoc_insertion_point(field_mutable_list:fingerprint.EnrollmentRequest.fmdCandidates)
  return &fmdcandidates_;
}
inline const ::fingerprint::PreEnrolledFMD& EnrollmentRequest::_internal_fmdcandidates(int index) const {
  return fmdcandidates_.Get(index);
}
inline const ::fingerprint::PreEnrolledFMD& EnrollmentRequest::fmdcandidates(int index) const {
  // @@protoc_insertion_point(field_get:fingerprint.EnrollmentRequest.fmdCandidates)
  return _internal_fmdcandidates(index);
}
inline ::fingerprint::PreEnrolledFMD* EnrollmentRequest::_internal_add_fmdcandidates() {
  return fmdcandidates_.Add();
}
inline ::fingerprint::PreEnrolledFMD* EnrollmentRequest::add_fmdcandidates() {
  // @@protoc_insertion_point(field_add:fingerprint.EnrollmentRequest.fmdCandidates)
  return _internal_add_fmdcandidates();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fingerprint::PreEnrolledFMD >&
EnrollmentRequest::fmdcandidates() const {
  // @@protoc_insertion_point(field_list:fingerprint.EnrollmentRequest.fmdCandidates)
  return fmdcandidates_;
}

// -------------------------------------------------------------------

// VerificationRequest

// .fingerprint.PreEnrolledFMD targetFMD = 1;
inline bool VerificationRequest::_internal_has_targetfmd() const {
  return this != internal_default_instance() && targetfmd_ != nullptr;
}
inline bool VerificationRequest::has_targetfmd() const {
  return _internal_has_targetfmd();
}
inline void VerificationRequest::clear_targetfmd() {
  if (GetArena() == nullptr && targetfmd_ != nullptr) {
    delete targetfmd_;
  }
  targetfmd_ = nullptr;
}
inline const ::fingerprint::PreEnrolledFMD& VerificationRequest::_internal_targetfmd() const {
  const ::fingerprint::PreEnrolledFMD* p = targetfmd_;
  return p != nullptr ? *p : reinterpret_cast<const ::fingerprint::PreEnrolledFMD&>(
      ::fingerprint::_PreEnrolledFMD_default_instance_);
}
inline const ::fingerprint::PreEnrolledFMD& VerificationRequest::targetfmd() const {
  // @@protoc_insertion_point(field_get:fingerprint.VerificationRequest.targetFMD)
  return _internal_targetfmd();
}
inline void VerificationRequest::unsafe_arena_set_allocated_targetfmd(
    ::fingerprint::PreEnrolledFMD* targetfmd) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(targetfmd_);
  }
  targetfmd_ = targetfmd;
  if (targetfmd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fingerprint.VerificationRequest.targetFMD)
}
inline ::fingerprint::PreEnrolledFMD* VerificationRequest::release_targetfmd() {
  
  ::fingerprint::PreEnrolledFMD* temp = targetfmd_;
  targetfmd_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fingerprint::PreEnrolledFMD* VerificationRequest::unsafe_arena_release_targetfmd() {
  // @@protoc_insertion_point(field_release:fingerprint.VerificationRequest.targetFMD)
  
  ::fingerprint::PreEnrolledFMD* temp = targetfmd_;
  targetfmd_ = nullptr;
  return temp;
}
inline ::fingerprint::PreEnrolledFMD* VerificationRequest::_internal_mutable_targetfmd() {
  
  if (targetfmd_ == nullptr) {
    auto* p = CreateMaybeMessage<::fingerprint::PreEnrolledFMD>(GetArena());
    targetfmd_ = p;
  }
  return targetfmd_;
}
inline ::fingerprint::PreEnrolledFMD* VerificationRequest::mutable_targetfmd() {
  // @@protoc_insertion_point(field_mutable:fingerprint.VerificationRequest.targetFMD)
  return _internal_mutable_targetfmd();
}
inline void VerificationRequest::set_allocated_targetfmd(::fingerprint::PreEnrolledFMD* targetfmd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete targetfmd_;
  }
  if (targetfmd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(targetfmd);
    if (message_arena != submessage_arena) {
      targetfmd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, targetfmd, submessage_arena);
    }
    
  } else {
    
  }
  targetfmd_ = targetfmd;
  // @@protoc_insertion_point(field_set_allocated:fingerprint.VerificationRequest.targetFMD)
}

// repeated .fingerprint.EnrolledFMD fmdCandidates = 2;
inline int VerificationRequest::_internal_fmdcandidates_size() const {
  return fmdcandidates_.size();
}
inline int VerificationRequest::fmdcandidates_size() const {
  return _internal_fmdcandidates_size();
}
inline void VerificationRequest::clear_fmdcandidates() {
  fmdcandidates_.Clear();
}
inline ::fingerprint::EnrolledFMD* VerificationRequest::mutable_fmdcandidates(int index) {
  // @@protoc_insertion_point(field_mutable:fingerprint.VerificationRequest.fmdCandidates)
  return fmdcandidates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fingerprint::EnrolledFMD >*
VerificationRequest::mutable_fmdcandidates() {
  // @@protoc_insertion_point(field_mutable_list:fingerprint.VerificationRequest.fmdCandidates)
  return &fmdcandidates_;
}
inline const ::fingerprint::EnrolledFMD& VerificationRequest::_internal_fmdcandidates(int index) const {
  return fmdcandidates_.Get(index);
}
inline const ::fingerprint::EnrolledFMD& VerificationRequest::fmdcandidates(int index) const {
  // @@protoc_insertion_point(field_get:fingerprint.VerificationRequest.fmdCandidates)
  return _internal_fmdcandidates(index);
}
inline ::fingerprint::EnrolledFMD* VerificationRequest::_internal_add_fmdcandidates() {
  return fmdcandidates_.Add();
}
inline ::fingerprint::EnrolledFMD* VerificationRequest::add_fmdcandidates() {
  // @@protoc_insertion_point(field_add:fingerprint.VerificationRequest.fmdCandidates)
  return _internal_add_fmdcandidates();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fingerprint::EnrolledFMD >&
VerificationRequest::fmdcandidates() const {
  // @@protoc_insertion_point(field_list:fingerprint.VerificationRequest.fmdCandidates)
  return fmdcandidates_;
}

// -------------------------------------------------------------------

// VerificationResponse

// bool match = 1;
inline void VerificationResponse::clear_match() {
  match_ = false;
}
inline bool VerificationResponse::_internal_match() const {
  return match_;
}
inline bool VerificationResponse::match() const {
  // @@protoc_insertion_point(field_get:fingerprint.VerificationResponse.match)
  return _internal_match();
}
inline void VerificationResponse::_internal_set_match(bool value) {
  
  match_ = value;
}
inline void VerificationResponse::set_match(bool value) {
  _internal_set_match(value);
  // @@protoc_insertion_point(field_set:fingerprint.VerificationResponse.match)
}

// -------------------------------------------------------------------

// CheckDuplicateResponse

// bool isDuplicate = 1;
inline void CheckDuplicateResponse::clear_isduplicate() {
  isduplicate_ = false;
}
inline bool CheckDuplicateResponse::_internal_isduplicate() const {
  return isduplicate_;
}
inline bool CheckDuplicateResponse::isduplicate() const {
  // @@protoc_insertion_point(field_get:fingerprint.CheckDuplicateResponse.isDuplicate)
  return _internal_isduplicate();
}
inline void CheckDuplicateResponse::_internal_set_isduplicate(bool value) {
  
  isduplicate_ = value;
}
inline void CheckDuplicateResponse::set_isduplicate(bool value) {
  _internal_set_isduplicate(value);
  // @@protoc_insertion_point(field_set:fingerprint.CheckDuplicateResponse.isDuplicate)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fingerprint

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_fingerprint_2eproto
