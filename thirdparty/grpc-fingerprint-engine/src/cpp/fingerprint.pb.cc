// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fingerprint.proto

#include "fingerprint.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_fingerprint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnrolledFMD_fingerprint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fingerprint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PreEnrolledFMD_fingerprint_2eproto;
namespace fingerprint {
class PreEnrolledFMDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PreEnrolledFMD> _instance;
} _PreEnrolledFMD_default_instance_;
class EnrolledFMDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnrolledFMD> _instance;
} _EnrolledFMD_default_instance_;
class EnrollmentRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnrollmentRequest> _instance;
} _EnrollmentRequest_default_instance_;
class VerificationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VerificationRequest> _instance;
} _VerificationRequest_default_instance_;
class VerificationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VerificationResponse> _instance;
} _VerificationResponse_default_instance_;
class CheckDuplicateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckDuplicateResponse> _instance;
} _CheckDuplicateResponse_default_instance_;
}  // namespace fingerprint
static void InitDefaultsscc_info_CheckDuplicateResponse_fingerprint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fingerprint::_CheckDuplicateResponse_default_instance_;
    new (ptr) ::fingerprint::CheckDuplicateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckDuplicateResponse_fingerprint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CheckDuplicateResponse_fingerprint_2eproto}, {}};

static void InitDefaultsscc_info_EnrolledFMD_fingerprint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fingerprint::_EnrolledFMD_default_instance_;
    new (ptr) ::fingerprint::EnrolledFMD();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnrolledFMD_fingerprint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnrolledFMD_fingerprint_2eproto}, {}};

static void InitDefaultsscc_info_EnrollmentRequest_fingerprint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fingerprint::_EnrollmentRequest_default_instance_;
    new (ptr) ::fingerprint::EnrollmentRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EnrollmentRequest_fingerprint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EnrollmentRequest_fingerprint_2eproto}, {
      &scc_info_PreEnrolledFMD_fingerprint_2eproto.base,}};

static void InitDefaultsscc_info_PreEnrolledFMD_fingerprint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fingerprint::_PreEnrolledFMD_default_instance_;
    new (ptr) ::fingerprint::PreEnrolledFMD();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PreEnrolledFMD_fingerprint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PreEnrolledFMD_fingerprint_2eproto}, {}};

static void InitDefaultsscc_info_VerificationRequest_fingerprint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fingerprint::_VerificationRequest_default_instance_;
    new (ptr) ::fingerprint::VerificationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VerificationRequest_fingerprint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_VerificationRequest_fingerprint_2eproto}, {
      &scc_info_PreEnrolledFMD_fingerprint_2eproto.base,
      &scc_info_EnrolledFMD_fingerprint_2eproto.base,}};

static void InitDefaultsscc_info_VerificationResponse_fingerprint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fingerprint::_VerificationResponse_default_instance_;
    new (ptr) ::fingerprint::VerificationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VerificationResponse_fingerprint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VerificationResponse_fingerprint_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_fingerprint_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_fingerprint_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_fingerprint_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_fingerprint_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fingerprint::PreEnrolledFMD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fingerprint::PreEnrolledFMD, base64preenrolledfmd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fingerprint::EnrolledFMD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fingerprint::EnrolledFMD, base64enrolledfmd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fingerprint::EnrollmentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fingerprint::EnrollmentRequest, fmdcandidates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fingerprint::VerificationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fingerprint::VerificationRequest, targetfmd_),
  PROTOBUF_FIELD_OFFSET(::fingerprint::VerificationRequest, fmdcandidates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fingerprint::VerificationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fingerprint::VerificationResponse, match_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fingerprint::CheckDuplicateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fingerprint::CheckDuplicateResponse, isduplicate_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::fingerprint::PreEnrolledFMD)},
  { 6, -1, sizeof(::fingerprint::EnrolledFMD)},
  { 12, -1, sizeof(::fingerprint::EnrollmentRequest)},
  { 18, -1, sizeof(::fingerprint::VerificationRequest)},
  { 25, -1, sizeof(::fingerprint::VerificationResponse)},
  { 31, -1, sizeof(::fingerprint::CheckDuplicateResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fingerprint::_PreEnrolledFMD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fingerprint::_EnrolledFMD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fingerprint::_EnrollmentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fingerprint::_VerificationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fingerprint::_VerificationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fingerprint::_CheckDuplicateResponse_default_instance_),
};

const char descriptor_table_protodef_fingerprint_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021fingerprint.proto\022\013fingerprint\".\n\016PreE"
  "nrolledFMD\022\034\n\024base64PreEnrolledFMD\030\001 \001(\t"
  "\"(\n\013EnrolledFMD\022\031\n\021base64EnrolledFMD\030\001 \001"
  "(\t\"G\n\021EnrollmentRequest\0222\n\rfmdCandidates"
  "\030\001 \003(\0132\033.fingerprint.PreEnrolledFMD\"v\n\023V"
  "erificationRequest\022.\n\ttargetFMD\030\001 \001(\0132\033."
  "fingerprint.PreEnrolledFMD\022/\n\rfmdCandida"
  "tes\030\002 \003(\0132\030.fingerprint.EnrolledFMD\"%\n\024V"
  "erificationResponse\022\r\n\005match\030\001 \001(\010\"-\n\026Ch"
  "eckDuplicateResponse\022\023\n\013isDuplicate\030\001 \001("
  "\0102\223\002\n\013FingerPrint\022O\n\021EnrollFingerprint\022\036"
  ".fingerprint.EnrollmentRequest\032\030.fingerp"
  "rint.EnrolledFMD\"\000\022Z\n\021VerifyFingerprint\022"
  " .fingerprint.VerificationRequest\032!.fing"
  "erprint.VerificationResponse\"\000\022W\n\016CheckD"
  "uplicate\022 .fingerprint.VerificationReque"
  "st\032#.fingerprint.CheckDuplicateResponseb"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_fingerprint_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_fingerprint_2eproto_sccs[6] = {
  &scc_info_CheckDuplicateResponse_fingerprint_2eproto.base,
  &scc_info_EnrolledFMD_fingerprint_2eproto.base,
  &scc_info_EnrollmentRequest_fingerprint_2eproto.base,
  &scc_info_PreEnrolledFMD_fingerprint_2eproto.base,
  &scc_info_VerificationRequest_fingerprint_2eproto.base,
  &scc_info_VerificationResponse_fingerprint_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_fingerprint_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fingerprint_2eproto = {
  false, false, descriptor_table_protodef_fingerprint_2eproto, "fingerprint.proto", 687,
  &descriptor_table_fingerprint_2eproto_once, descriptor_table_fingerprint_2eproto_sccs, descriptor_table_fingerprint_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_fingerprint_2eproto::offsets,
  file_level_metadata_fingerprint_2eproto, 6, file_level_enum_descriptors_fingerprint_2eproto, file_level_service_descriptors_fingerprint_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_fingerprint_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_fingerprint_2eproto)), true);
namespace fingerprint {

// ===================================================================

class PreEnrolledFMD::_Internal {
 public:
};

PreEnrolledFMD::PreEnrolledFMD(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fingerprint.PreEnrolledFMD)
}
PreEnrolledFMD::PreEnrolledFMD(const PreEnrolledFMD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  base64preenrolledfmd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_base64preenrolledfmd().empty()) {
    base64preenrolledfmd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_base64preenrolledfmd(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:fingerprint.PreEnrolledFMD)
}

void PreEnrolledFMD::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PreEnrolledFMD_fingerprint_2eproto.base);
  base64preenrolledfmd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PreEnrolledFMD::~PreEnrolledFMD() {
  // @@protoc_insertion_point(destructor:fingerprint.PreEnrolledFMD)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PreEnrolledFMD::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  base64preenrolledfmd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PreEnrolledFMD::ArenaDtor(void* object) {
  PreEnrolledFMD* _this = reinterpret_cast< PreEnrolledFMD* >(object);
  (void)_this;
}
void PreEnrolledFMD::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PreEnrolledFMD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PreEnrolledFMD& PreEnrolledFMD::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PreEnrolledFMD_fingerprint_2eproto.base);
  return *internal_default_instance();
}


void PreEnrolledFMD::Clear() {
// @@protoc_insertion_point(message_clear_start:fingerprint.PreEnrolledFMD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  base64preenrolledfmd_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PreEnrolledFMD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string base64PreEnrolledFMD = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_base64preenrolledfmd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fingerprint.PreEnrolledFMD.base64PreEnrolledFMD"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PreEnrolledFMD::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fingerprint.PreEnrolledFMD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string base64PreEnrolledFMD = 1;
  if (this->base64preenrolledfmd().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_base64preenrolledfmd().data(), static_cast<int>(this->_internal_base64preenrolledfmd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fingerprint.PreEnrolledFMD.base64PreEnrolledFMD");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_base64preenrolledfmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fingerprint.PreEnrolledFMD)
  return target;
}

size_t PreEnrolledFMD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fingerprint.PreEnrolledFMD)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string base64PreEnrolledFMD = 1;
  if (this->base64preenrolledfmd().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_base64preenrolledfmd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PreEnrolledFMD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fingerprint.PreEnrolledFMD)
  GOOGLE_DCHECK_NE(&from, this);
  const PreEnrolledFMD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PreEnrolledFMD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fingerprint.PreEnrolledFMD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fingerprint.PreEnrolledFMD)
    MergeFrom(*source);
  }
}

void PreEnrolledFMD::MergeFrom(const PreEnrolledFMD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fingerprint.PreEnrolledFMD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.base64preenrolledfmd().size() > 0) {
    _internal_set_base64preenrolledfmd(from._internal_base64preenrolledfmd());
  }
}

void PreEnrolledFMD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fingerprint.PreEnrolledFMD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreEnrolledFMD::CopyFrom(const PreEnrolledFMD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fingerprint.PreEnrolledFMD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreEnrolledFMD::IsInitialized() const {
  return true;
}

void PreEnrolledFMD::InternalSwap(PreEnrolledFMD* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  base64preenrolledfmd_.Swap(&other->base64preenrolledfmd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PreEnrolledFMD::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EnrolledFMD::_Internal {
 public:
};

EnrolledFMD::EnrolledFMD(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fingerprint.EnrolledFMD)
}
EnrolledFMD::EnrolledFMD(const EnrolledFMD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  base64enrolledfmd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_base64enrolledfmd().empty()) {
    base64enrolledfmd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_base64enrolledfmd(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:fingerprint.EnrolledFMD)
}

void EnrolledFMD::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnrolledFMD_fingerprint_2eproto.base);
  base64enrolledfmd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

EnrolledFMD::~EnrolledFMD() {
  // @@protoc_insertion_point(destructor:fingerprint.EnrolledFMD)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EnrolledFMD::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  base64enrolledfmd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EnrolledFMD::ArenaDtor(void* object) {
  EnrolledFMD* _this = reinterpret_cast< EnrolledFMD* >(object);
  (void)_this;
}
void EnrolledFMD::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnrolledFMD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnrolledFMD& EnrolledFMD::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnrolledFMD_fingerprint_2eproto.base);
  return *internal_default_instance();
}


void EnrolledFMD::Clear() {
// @@protoc_insertion_point(message_clear_start:fingerprint.EnrolledFMD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  base64enrolledfmd_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnrolledFMD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string base64EnrolledFMD = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_base64enrolledfmd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fingerprint.EnrolledFMD.base64EnrolledFMD"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnrolledFMD::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fingerprint.EnrolledFMD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string base64EnrolledFMD = 1;
  if (this->base64enrolledfmd().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_base64enrolledfmd().data(), static_cast<int>(this->_internal_base64enrolledfmd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fingerprint.EnrolledFMD.base64EnrolledFMD");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_base64enrolledfmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fingerprint.EnrolledFMD)
  return target;
}

size_t EnrolledFMD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fingerprint.EnrolledFMD)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string base64EnrolledFMD = 1;
  if (this->base64enrolledfmd().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_base64enrolledfmd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnrolledFMD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fingerprint.EnrolledFMD)
  GOOGLE_DCHECK_NE(&from, this);
  const EnrolledFMD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnrolledFMD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fingerprint.EnrolledFMD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fingerprint.EnrolledFMD)
    MergeFrom(*source);
  }
}

void EnrolledFMD::MergeFrom(const EnrolledFMD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fingerprint.EnrolledFMD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.base64enrolledfmd().size() > 0) {
    _internal_set_base64enrolledfmd(from._internal_base64enrolledfmd());
  }
}

void EnrolledFMD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fingerprint.EnrolledFMD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnrolledFMD::CopyFrom(const EnrolledFMD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fingerprint.EnrolledFMD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnrolledFMD::IsInitialized() const {
  return true;
}

void EnrolledFMD::InternalSwap(EnrolledFMD* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  base64enrolledfmd_.Swap(&other->base64enrolledfmd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata EnrolledFMD::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EnrollmentRequest::_Internal {
 public:
};

EnrollmentRequest::EnrollmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fmdcandidates_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fingerprint.EnrollmentRequest)
}
EnrollmentRequest::EnrollmentRequest(const EnrollmentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fmdcandidates_(from.fmdcandidates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fingerprint.EnrollmentRequest)
}

void EnrollmentRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnrollmentRequest_fingerprint_2eproto.base);
}

EnrollmentRequest::~EnrollmentRequest() {
  // @@protoc_insertion_point(destructor:fingerprint.EnrollmentRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EnrollmentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnrollmentRequest::ArenaDtor(void* object) {
  EnrollmentRequest* _this = reinterpret_cast< EnrollmentRequest* >(object);
  (void)_this;
}
void EnrollmentRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnrollmentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnrollmentRequest& EnrollmentRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnrollmentRequest_fingerprint_2eproto.base);
  return *internal_default_instance();
}


void EnrollmentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fingerprint.EnrollmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fmdcandidates_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnrollmentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .fingerprint.PreEnrolledFMD fmdCandidates = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fmdcandidates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnrollmentRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fingerprint.EnrollmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .fingerprint.PreEnrolledFMD fmdCandidates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fmdcandidates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_fmdcandidates(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fingerprint.EnrollmentRequest)
  return target;
}

size_t EnrollmentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fingerprint.EnrollmentRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fingerprint.PreEnrolledFMD fmdCandidates = 1;
  total_size += 1UL * this->_internal_fmdcandidates_size();
  for (const auto& msg : this->fmdcandidates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnrollmentRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fingerprint.EnrollmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EnrollmentRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnrollmentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fingerprint.EnrollmentRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fingerprint.EnrollmentRequest)
    MergeFrom(*source);
  }
}

void EnrollmentRequest::MergeFrom(const EnrollmentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fingerprint.EnrollmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fmdcandidates_.MergeFrom(from.fmdcandidates_);
}

void EnrollmentRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fingerprint.EnrollmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnrollmentRequest::CopyFrom(const EnrollmentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fingerprint.EnrollmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnrollmentRequest::IsInitialized() const {
  return true;
}

void EnrollmentRequest::InternalSwap(EnrollmentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fmdcandidates_.InternalSwap(&other->fmdcandidates_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnrollmentRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VerificationRequest::_Internal {
 public:
  static const ::fingerprint::PreEnrolledFMD& targetfmd(const VerificationRequest* msg);
};

const ::fingerprint::PreEnrolledFMD&
VerificationRequest::_Internal::targetfmd(const VerificationRequest* msg) {
  return *msg->targetfmd_;
}
VerificationRequest::VerificationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fmdcandidates_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fingerprint.VerificationRequest)
}
VerificationRequest::VerificationRequest(const VerificationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fmdcandidates_(from.fmdcandidates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_targetfmd()) {
    targetfmd_ = new ::fingerprint::PreEnrolledFMD(*from.targetfmd_);
  } else {
    targetfmd_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:fingerprint.VerificationRequest)
}

void VerificationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VerificationRequest_fingerprint_2eproto.base);
  targetfmd_ = nullptr;
}

VerificationRequest::~VerificationRequest() {
  // @@protoc_insertion_point(destructor:fingerprint.VerificationRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VerificationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete targetfmd_;
}

void VerificationRequest::ArenaDtor(void* object) {
  VerificationRequest* _this = reinterpret_cast< VerificationRequest* >(object);
  (void)_this;
}
void VerificationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VerificationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VerificationRequest& VerificationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VerificationRequest_fingerprint_2eproto.base);
  return *internal_default_instance();
}


void VerificationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fingerprint.VerificationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fmdcandidates_.Clear();
  if (GetArena() == nullptr && targetfmd_ != nullptr) {
    delete targetfmd_;
  }
  targetfmd_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VerificationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .fingerprint.PreEnrolledFMD targetFMD = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_targetfmd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .fingerprint.EnrolledFMD fmdCandidates = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fmdcandidates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VerificationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fingerprint.VerificationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fingerprint.PreEnrolledFMD targetFMD = 1;
  if (this->has_targetfmd()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::targetfmd(this), target, stream);
  }

  // repeated .fingerprint.EnrolledFMD fmdCandidates = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fmdcandidates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_fmdcandidates(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fingerprint.VerificationRequest)
  return target;
}

size_t VerificationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fingerprint.VerificationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fingerprint.EnrolledFMD fmdCandidates = 2;
  total_size += 1UL * this->_internal_fmdcandidates_size();
  for (const auto& msg : this->fmdcandidates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .fingerprint.PreEnrolledFMD targetFMD = 1;
  if (this->has_targetfmd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *targetfmd_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VerificationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fingerprint.VerificationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const VerificationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VerificationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fingerprint.VerificationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fingerprint.VerificationRequest)
    MergeFrom(*source);
  }
}

void VerificationRequest::MergeFrom(const VerificationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fingerprint.VerificationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fmdcandidates_.MergeFrom(from.fmdcandidates_);
  if (from.has_targetfmd()) {
    _internal_mutable_targetfmd()->::fingerprint::PreEnrolledFMD::MergeFrom(from._internal_targetfmd());
  }
}

void VerificationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fingerprint.VerificationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerificationRequest::CopyFrom(const VerificationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fingerprint.VerificationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerificationRequest::IsInitialized() const {
  return true;
}

void VerificationRequest::InternalSwap(VerificationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fmdcandidates_.InternalSwap(&other->fmdcandidates_);
  swap(targetfmd_, other->targetfmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VerificationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VerificationResponse::_Internal {
 public:
};

VerificationResponse::VerificationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fingerprint.VerificationResponse)
}
VerificationResponse::VerificationResponse(const VerificationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  match_ = from.match_;
  // @@protoc_insertion_point(copy_constructor:fingerprint.VerificationResponse)
}

void VerificationResponse::SharedCtor() {
  match_ = false;
}

VerificationResponse::~VerificationResponse() {
  // @@protoc_insertion_point(destructor:fingerprint.VerificationResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VerificationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VerificationResponse::ArenaDtor(void* object) {
  VerificationResponse* _this = reinterpret_cast< VerificationResponse* >(object);
  (void)_this;
}
void VerificationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VerificationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VerificationResponse& VerificationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VerificationResponse_fingerprint_2eproto.base);
  return *internal_default_instance();
}


void VerificationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fingerprint.VerificationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  match_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VerificationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool match = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VerificationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fingerprint.VerificationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool match = 1;
  if (this->match() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_match(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fingerprint.VerificationResponse)
  return target;
}

size_t VerificationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fingerprint.VerificationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool match = 1;
  if (this->match() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VerificationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fingerprint.VerificationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const VerificationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VerificationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fingerprint.VerificationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fingerprint.VerificationResponse)
    MergeFrom(*source);
  }
}

void VerificationResponse::MergeFrom(const VerificationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fingerprint.VerificationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.match() != 0) {
    _internal_set_match(from._internal_match());
  }
}

void VerificationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fingerprint.VerificationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerificationResponse::CopyFrom(const VerificationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fingerprint.VerificationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerificationResponse::IsInitialized() const {
  return true;
}

void VerificationResponse::InternalSwap(VerificationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(match_, other->match_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VerificationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CheckDuplicateResponse::_Internal {
 public:
};

CheckDuplicateResponse::CheckDuplicateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fingerprint.CheckDuplicateResponse)
}
CheckDuplicateResponse::CheckDuplicateResponse(const CheckDuplicateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  isduplicate_ = from.isduplicate_;
  // @@protoc_insertion_point(copy_constructor:fingerprint.CheckDuplicateResponse)
}

void CheckDuplicateResponse::SharedCtor() {
  isduplicate_ = false;
}

CheckDuplicateResponse::~CheckDuplicateResponse() {
  // @@protoc_insertion_point(destructor:fingerprint.CheckDuplicateResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CheckDuplicateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CheckDuplicateResponse::ArenaDtor(void* object) {
  CheckDuplicateResponse* _this = reinterpret_cast< CheckDuplicateResponse* >(object);
  (void)_this;
}
void CheckDuplicateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckDuplicateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckDuplicateResponse& CheckDuplicateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckDuplicateResponse_fingerprint_2eproto.base);
  return *internal_default_instance();
}


void CheckDuplicateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fingerprint.CheckDuplicateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  isduplicate_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckDuplicateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool isDuplicate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          isduplicate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckDuplicateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fingerprint.CheckDuplicateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isDuplicate = 1;
  if (this->isduplicate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_isduplicate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fingerprint.CheckDuplicateResponse)
  return target;
}

size_t CheckDuplicateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fingerprint.CheckDuplicateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool isDuplicate = 1;
  if (this->isduplicate() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckDuplicateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fingerprint.CheckDuplicateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckDuplicateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckDuplicateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fingerprint.CheckDuplicateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fingerprint.CheckDuplicateResponse)
    MergeFrom(*source);
  }
}

void CheckDuplicateResponse::MergeFrom(const CheckDuplicateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fingerprint.CheckDuplicateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.isduplicate() != 0) {
    _internal_set_isduplicate(from._internal_isduplicate());
  }
}

void CheckDuplicateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fingerprint.CheckDuplicateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckDuplicateResponse::CopyFrom(const CheckDuplicateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fingerprint.CheckDuplicateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckDuplicateResponse::IsInitialized() const {
  return true;
}

void CheckDuplicateResponse::InternalSwap(CheckDuplicateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(isduplicate_, other->isduplicate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckDuplicateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace fingerprint
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::fingerprint::PreEnrolledFMD* Arena::CreateMaybeMessage< ::fingerprint::PreEnrolledFMD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fingerprint::PreEnrolledFMD >(arena);
}
template<> PROTOBUF_NOINLINE ::fingerprint::EnrolledFMD* Arena::CreateMaybeMessage< ::fingerprint::EnrolledFMD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fingerprint::EnrolledFMD >(arena);
}
template<> PROTOBUF_NOINLINE ::fingerprint::EnrollmentRequest* Arena::CreateMaybeMessage< ::fingerprint::EnrollmentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fingerprint::EnrollmentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::fingerprint::VerificationRequest* Arena::CreateMaybeMessage< ::fingerprint::VerificationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fingerprint::VerificationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::fingerprint::VerificationResponse* Arena::CreateMaybeMessage< ::fingerprint::VerificationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fingerprint::VerificationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::fingerprint::CheckDuplicateResponse* Arena::CreateMaybeMessage< ::fingerprint::CheckDuplicateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fingerprint::CheckDuplicateResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
